.Dd April 10, 2013
.Dt libfdata 3
.Os libfdata
.Sh NAME
.Nm libfdata.h
.Nd Library to provide generic file data functions
.Sh LIBRARY
.Lb libfdata
.Sh SYNOPSIS
.In libfdata.h
.Pp
Support functions
.Ft const char *
.Fn libfdata_get_version "void"
.Pp
Notify functions
.Ft void
.Fn libfdata_notify_set_verbose "int verbose"
.Ft int
.Fn libfdata_notify_set_stream "FILE *stream, libfdata_error_t **error"
.Ft int
.Fn libfdata_notify_stream_open "const char *filename, libfdata_error_t **error"
.Ft int
.Fn libfdata_notify_stream_close "libfdata_error_t **error"
.Pp
Error functions
.Ft void
.Fn libfdata_error_free "libfdata_error_t **error"
.Ft int
.Fn libfdata_error_fprint "libfdata_error_t *error, FILE *stream"
.Ft int
.Fn libfdata_error_sprint "libfdata_error_t *error, char *string, size_t size"
.Ft int
.Fn libfdata_error_backtrace_fprint "libfdata_error_t *error, FILE *stream"
.Ft int
.Fn libfdata_error_backtrace_sprint "libfdata_error_t *error, char *string, size_t size"
.Pp
List functions
.Pp
List element functions
.Ft int
.Fn libfdata_list_element_get_mapped_size "libfdata_list_element_t *element, size64_t *size, libfdata_error_t **error"
.Ft int
.Fn libfdata_list_element_set_mapped_size "libfdata_list_element_t *element, size64_t size, libfdata_error_t **error"
.Ft int
.Fn libfdata_list_element_get_element_value "libfdata_list_element_t *element, intptr_t *file_io_handle, libfcache_cache_t *cache, intptr_t **element_value, uint8_t read_flags, libfdata_error_t **error"
.Ft int
.Fn libfdata_list_element_set_element_value "libfdata_list_element_t *element, intptr_t *file_io_handle, libfcache_cache_t *cache, intptr_t *element_value, int (*free_element_value)( intptr_t **element_value, libfdata_error_t **error ), uint8_t write_flags, libfdata_error_t **error"
.Pp
Stream functions
.Ft int
.Fn libfdata_stream_initialize "libfdata_stream_t **stream, intptr_t *data_handle, int (*free_data_handle)( intptr_t **data_handle, libfdata_error_t **error ), int (*clone_data_handle)( intptr_t **destination_data_handle, intptr_t *source_data_handle, libfdata_error_t **error ), int (*create_segment)( intptr_t *data_handle, intptr_t *file_io_handle, int segment_index, int *segment_file_index, off64_t *segment_offset, size64_t *segment_size, uint32_t *segment_flags, libfdata_error_t **error ), ssize_t (*read_segment_data)( intptr_t *data_handle, intptr_t *file_io_handle, int segment_index, int segment_file_index, uint8_t *segment_data, size_t segment_data_size, uint32_t segment_flags, uint8_t read_flags, libfdata_error_t **error ), ssize_t (*write_segment_data)( intptr_t *data_handle, intptr_t *file_io_handle, int segment_index, int segment_file_index, const uint8_t *segment_data, size_t segment_data_size, uint32_t segment_flags, uint8_t write_flags, libfdata_error_t **error ), off64_t (*seek_segment_offset)( intptr_t *data_handle, intptr_t *file_io_handle, int segment_index, int segment_file_index, off64_t segment_offset, libfdata_error_t **error ), uint8_t flags, libfdata_error_t **error"
.Ft int
.Fn libfdata_stream_free "libfdata_stream_t **stream, libfdata_error_t **error"
.Ft int
.Fn libfdata_stream_clone "libfdata_stream_t **destination_stream, libfdata_stream_t *source_stream, libfdata_error_t **error"
.Ft int
.Fn libfdata_stream_empty "libfdata_stream_t *stream, libfdata_error_t **error"
.Ft int
.Fn libfdata_stream_resize "libfdata_stream_t *stream, int number_of_segments, libfdata_error_t **error"
.Ft int
.Fn libfdata_stream_reverse "libfdata_stream_t *stream, libfdata_error_t **error"
.Ft int
.Fn libfdata_stream_get_number_of_segments "libfdata_stream_t *stream, int *number_of_segments, libfdata_error_t **error"
.Ft int
.Fn libfdata_stream_get_segment_by_index "libfdata_stream_t *stream, int segment_index, int *segment_file_index, off64_t *segment_offset, size64_t *segment_size, uint32_t *segment_flags, libfdata_error_t **error"
.Ft int
.Fn libfdata_stream_set_segment_by_index "libfdata_stream_t *stream, int segment_index, int segment_file_index, off64_t segment_offset, size64_t segment_size, uint32_t segment_flags, libfdata_error_t **error"
.Ft int
.Fn libfdata_stream_prepend_segment "libfdata_stream_t *stream, int segment_file_index, off64_t segment_offset, size64_t segment_size, uint32_t segment_flags, libfdata_error_t **error"
.Ft int
.Fn libfdata_stream_append_segment "libfdata_stream_t *stream, int *segment_index, int segment_file_index, off64_t segment_offset, size64_t segment_size, uint32_t segment_flags, libfdata_error_t **error"
.Ft int
.Fn libfdata_stream_get_segment_index_at_offset "libfdata_stream_t *stream, off64_t data_offset, int *segment_index, off64_t *segment_data_offset, libfdata_error_t **error"
.Ft ssize_t
.Fn libfdata_stream_read_buffer "libfdata_stream_t *stream, intptr_t *file_io_handle, uint8_t *buffer, size_t buffer_size, uint8_t read_flags, libfdata_error_t **error"
.Ft ssize_t
.Fn libfdata_stream_write_buffer "libfdata_stream_t *stream, intptr_t *file_io_handle, const uint8_t *buffer, size_t buffer_size, uint8_t write_flags, libfdata_error_t **error"
.Ft off64_t
.Fn libfdata_stream_seek_offset "libfdata_stream_t *stream, off64_t offset, int whence, libfdata_error_t **error"
.Ft int
.Fn libfdata_stream_get_offset "libfdata_stream_t *stream, off64_t *offset, libfdata_error_t **error"
.Ft int
.Fn libfdata_stream_get_size "libfdata_stream_t *stream, size64_t *size, libfdata_error_t **error"
.Sh DESCRIPTION
The
.Fn libfdata_get_version
function is used to retrieve the library version.
.Sh RETURN VALUES
Most of the functions return NULL or -1 on error, dependent on the return type. For the actual return values refer to libfdata.h
.Sh ENVIRONMENT
None
.Sh FILES
None
.Sh NOTES
.Sh BUGS
Please report bugs of any kind to <joachim.metz@gmail.com> or on the project website:
http://code.google.com/p/libfdata/
.Sh AUTHOR
These man pages were written by Joachim Metz.
.Sh COPYRIGHT
Copyright (c) 2010-2013, Joachim Metz <joachim.metz@gmail.com>.
This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.Sh SEE ALSO
the libfdata.h include file
